百度：Hash，一般翻译做散列、杂凑，或音译为哈希
是把任意长度的输入（又叫做预映射pre-image）通过散列算法变换成固定长度的输出，该输出就是散列值。
这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，
所以不可能从散列值来确定唯一的输入值。
简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。

Leetcode：
哈希表（Hash Table，也叫散列表），是根据键（Key）而直接访问在内存存储位置的数据结构。
哈希表通过计算一个关于键值的函数，将所需查询的数据映射到表中一个位置来访问记录，这加快了查找速度。
这个映射函数称做哈希函数，存放记录的数组称做哈希表。

Go的散列表实现是内置的。添加key时系统帮忙散列了这个key，放到对应位置。
封装好了，用户只管插入查找就可以了，保证时间复杂度O(1)

No.1 中使用散列表,使得对数组中可能存在的某个值的查找速度大幅上升

No.13 中使用散列表，支持非数字索引

No.30 中使用散列表，用以查找字符串是否出现

No.41 中使用散列表，用以查找数是否出现。此外运用特殊手法将“标记”打在了原数组上以节省空间

No.141 中使用散列表，使得对已保存地址的查找速度大幅上升

No.160 中使用散列表，使得对已保存地址的查找速度大幅上升

散列表作用：
1.加快查找速度
2.允许非数字作为索引

总而言之：高速记录与查询
像个可写字典